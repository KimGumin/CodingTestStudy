// N×N 크기의 공간에 물고기 M마리와 아기 상어 1마리가 있다. 공간은 1×1 크기의 정사각형 칸으로 나누어져 있다. 한 칸에는 물고기가 최대 1마리 존재한다.
// 아기 상어와 물고기는 모두 크기를 가지고 있고, 이 크기는 자연수이다. 가장 처음에 아기 상어의 크기는 2이고, 아기 상어는 1초에 상하좌우로 인접한 한 칸씩 이동한다.
// 아기 상어는 자신의 크기보다 큰 물고기가 있는 칸은 지나갈 수 없고, 나머지 칸은 모두 지나갈 수 있다. 아기 상어는 자신의 크기보다 작은 물고기만 먹을 수 있다. 
// 따라서, 크기가 같은 물고기는 먹을 수 없지만, 그 물고기가 있는 칸은 지나갈 수 있다.
// 아기 상어가 어디로 이동할지 결정하는 방법은 아래와 같다.
// 더 이상 먹을 수 있는 물고기가 공간에 없다면 아기 상어는 엄마 상어에게 도움을 요청한다.
// 먹을 수 있는 물고기가 1마리라면, 그 물고기를 먹으러 간다.
// 먹을 수 있는 물고기가 1마리보다 많다면, 거리가 가장 가까운 물고기를 먹으러 간다.
// 거리는 아기 상어가 있는 칸에서 물고기가 있는 칸으로 이동할 때, 지나야하는 칸의 개수의 최솟값이다.
// 거리가 가까운 물고기가 많다면, 가장 위에 있는 물고기, 그러한 물고기가 여러마리라면, 가장 왼쪽에 있는 물고기를 먹는다.
// 아기 상어의 이동은 1초 걸리고, 물고기를 먹는데 걸리는 시간은 없다고 가정한다. 즉, 아기 상어가 먹을 수 있는 물고기가 있는 칸으로 이동했다면, 이동과 동시에 물고기를 먹는다. 
// 물고기를 먹으면, 그 칸은 빈 칸이 된다.
// 아기 상어는 자신의 크기와 같은 수의 물고기를 먹을 때 마다 크기가 1 증가한다. 예를 들어, 크기가 2인 아기 상어는 물고기를 2마리 먹으면 크기가 3이 된다.
// 공간의 상태가 주어졌을 때, 아기 상어가 몇 초 동안 엄마 상어에게 도움을 요청하지 않고 물고기를 잡아먹을 수 있는지 구하는 프로그램을 작성하시오.
import java.util.*;

public class Main{
	static int size = 2;	// 아기상어의 크기
	static int count = 0;	// 물고기를 먹은 횟수
	static int ans = 0;
	static int sea[][];		// 물고기의 위치 상황
	static int area;		// 바다의 크기
	static Shark s;
	static Queue<Shark> q = new LinkedList<Shark>();
	
	static class Shark{	// 상어 객체
		int x, y, move;
		Shark(int x, int y, int move){
			this.x = x;
			this.y = y;
			this.move = move;
		}
	}
	
	static void input() {	// 입력
		Scanner sc = new Scanner(System.in);
		System.out.print("바다의 크기를 입력하시오 : ");
		area = sc.nextInt();
		sea = new int[area][area];
		
		for(int i = 0; i < area; i++) {
			for(int j = 0; j < area; j++) {
				sea[i][j] = sc.nextInt();
				if(sea[i][j] == 9) {	// 상어 객체 생성
					q.add(new Shark(j, i, 0));
					sea[i][j] = 0;
				}
			}
		}
	}
	
	static void print() {	// 출력
		for(int i = 0; i < area; i++) {
			for(int j = 0; j < area; j++) {
				System.out.print(sea[i][j] + " ");
			}
			System.out.println();
		}
	}
	
	static void bfs() {
		while(true) {
			int dx[] = {-1, 1, 0, 0};
			int dy[] = {0, 0, -1, 1};
			int dist[][] = new int[area][area];
			LinkedList<Shark> fish = new LinkedList<Shark>();
			while(!q.isEmpty()) {
				Shark ss = q.poll();
				for(int i = 0; i < 4; i++) {
					int nx = ss.x + dx[i];
					int ny = ss.y + dy[i];
					if(nx > -1 && nx < area && ny > -1 && ny < area && dist[nx][ny] == 0 && sea[ny][nx] < size) {	// 지나갈 수 있으면
						dist[nx][ny] = dist[ss.x][ss.y] + 1;	// 기준으로부터 거리를 표현
						if(1 <= sea[nx][ny] && sea[nx][ny] <= 6 && sea[nx][ny] < size) {	// 먹잇감 발견하면
							fish.add(new Shark(nx, ny, dist[nx][ny]));
							q.add(new Shark(nx, ny, dist[nx][ny]));
							continue;
						}
						q.add(new Shark(nx, ny, dist[nx][ny]));
					}
				}
			}
			
			if(fish.size() == 0) {	// 무한루프 빠져나오기 위한 조건
				System.out.println(ans);
				return;
			}
			
			Shark eatenFish = fish.get(0);
			for(int i=1; i<fish.size(); i++){
                if(eatenFish.move > fish.get(i).move) {
                    eatenFish = fish.get(i);
                }
                 
                if(eatenFish.move == fish.get(i).move) {
                    if(eatenFish.x > fish.get(i).x){
                        eatenFish = fish.get(i);
                        continue;
                    }else if(eatenFish.x == fish.get(i).x){
                        if(eatenFish.y > fish.get(i).y);
                        eatenFish = fish.get(i);   
                    }
                }   
            }
             
            ans += eatenFish.move;
            count++;
            sea[eatenFish.x][eatenFish.y] = 0;
            if(count == size) {
                size++;
                count = 0;
            }
            q.add(new Shark(eatenFish.x, eatenFish.y, size));
			
		}
	}
	
	public static void main(String[] args) {
		input();
		print();
		bfs();
	}
}
