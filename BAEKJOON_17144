import java.io.*;
import java.util.*;


public class Main {
	static int map[][], temp[][], row, column, past;
	static int dx[] = { -1, 1, 0, 0 }; // 서동북남
	static int dy[] = { 0, 0, -1, 1 };
	static int arc1x, arc1y, arc2x, arc2y;

	public static void input() {
		Scanner sc = new Scanner(System.in);
		row = sc.nextInt();
		column = sc.nextInt();
		past = sc.nextInt();
		map = new int[row][column];
		temp = new int[row][column];
		int id = 1;
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < column; j++) {
				map[i][j] = sc.nextInt();
				if (map[i][j] == -1) {
					if (id == 1) {
						arc1x = j;
						arc1y = i;
						id++;
					} else {
						arc2x = j;
						arc2y = i;
					}
				}
			}
		}
	}

	static void updateDust() { // 먼지 갱신
		for (int y = 0; y < row; y++) {
			for (int x = 0; x < column; x++) {
				if (x == arc1x && y == arc1y)
					continue;
				if (x == arc2x && y == arc2y)
					continue;

				int dirnum = 0;
				int current = map[y][x];
				int spread = current / 5;

				for (int i = 0; i < 4; i++) {
					int nx = x + dx[i];
					int ny = y + dy[i];
					if (nx < 0 || nx > column - 1 || ny < 0 || ny > row - 1)
						continue;
					if (map[ny][nx] == -1)
						continue;
					dirnum++;
					temp[ny][nx] += spread;
				}
				map[y][x] = current - (spread * dirnum);
			}
		}

		for (int y = 0; y < row; y++) { // 본 맵에 갱신해주고 확산 배열 초기화
			for (int x = 0; x < column; x++) {
				map[y][x] += temp[y][x];
				temp[y][x] = 0;
			}
		}
	}

	public static void cycle() {
        // 위쪽꺼
        for(int i=arc1y-1; i>0; i--) {
            map[i][0] = map[i-1][0];
        }
        for(int i=0; i<column-1; i++) {
            map[0][i] = map[0][i+1];
        }
        for(int i=0; i<arc1y; i++) {
            map[i][column-1] = map[i+1][column-1];
        }
        for(int i=column-1; i>1; i--) {
            map[arc1y][i] = map[arc1y][i-1];
        }
        // 한칸 채우기
        map[arc1y][1] = 0;
        
        //아래쪽꺼
        for(int i = arc2y+1; i<row-1; i++) {
            map[i][0] = map[i+1][0];
        }
        for(int i=0; i<column-1; i++) {
            map[row-1][i] = map[row-1][i+1];
        }
        for(int i=row-1; i>arc2y; i--) {
            map[i][column-1] = map[i-1][column-1];
        }
        for(int i=column-1; i>1; i--) {
            map[arc2y][i] = map[arc2y][i-1];
        }
        map[arc2y][1] = 0;
    }

	static void clean() {
		for (int i = 0; i < past; i++) {
			updateDust();
			cycle();
		}
	}

	static int print() {
		int result = 0;
		for (int y = 0; y < row; y++) {
			for (int x = 0; x < column; x++) {
				if (map[y][x] == -1)
					continue;
				result += map[y][x];
			}
		}
		return result;
	}

	public static void main(String[] args) {
		input();
		clean();
		System.out.println(print());
	}
}
